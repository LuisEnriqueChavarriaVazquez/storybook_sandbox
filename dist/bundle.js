(()=>{var t={331:()=>{class t extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"}),this.shadowRoot.innerHTML='\n        \x3c!-- Roboto Flex CDN --\x3e\n        <link href="https://fonts.googleapis.com/css2?family=Roboto+Flex:wght@100..1000&display=swap" rel="stylesheet">\n\n        <style>\n          :host {\n            display: inline-flex;\n            align-items: center;\n            font-family: \'Roboto Flex\', Arial, sans-serif; /* Use Roboto Flex */\n            flex-direction: column;\n          }\n  \n          .icon-container {\n            position: relative;\n            display: inline-flex;\n            align-items: center;\n            justify-content: center;\n            font-size: 28px; /* Slightly larger icon size */\n          }\n  \n          .badge {\n            position: absolute;\n            top: -10px;\n            right: -16px;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            min-width: auto;\n            height: 15px;\n            padding: 2px 6px;\n            font-size: 12px;\n            font-weight: 600; /* Slightly bolder number font */\n            color: #fff;\n            background-color: #B22222; /* Warmer red tone */\n            border-radius: 6px; /* Less rounded, more squared */\n            white-space: nowrap; /* Prevents text wrapping */\n          }\n  \n          /* If the badge contains more than one character, adjust border radius to create a pill shape */\n          .badge[data-multiple-characters="true"] {\n            border-radius: 6px; /* Keep consistent with the updated border-radius */\n          }\n  \n          .dot {\n            position: absolute;\n            top: -4px;\n            right: -4px;\n            width: 10px;\n            height: 10px;\n            border-radius: 50%;\n          }\n  \n          :host([state="not-available"]) .dot {\n            background-color: #B22222; /* Warmer red tone */\n          }\n  \n          :host([state="available"]) .dot {\n            background-color: #556B2F; /* Olive green for a warmer tone */\n          }\n  \n          :host([state="pending"]) .dot {\n            background-color: #DAA520; /* Goldenrod for a warm yellow tone */\n          }\n  \n          :host([state="disconnected"]) .dot {\n            background-color: #808080; /* Warm gray */\n          }\n  \n          .label {\n            margin-top: 4px; /* Comfortable margin between icon and label */\n            font-size: 14px;\n            font-weight: 600;\n            color: #000;\n            text-align: center;\n          }\n        </style>\n  \n        <div class="icon-container">\n          <slot name="icon"></slot>\n          <div class="dot"></div>\n          <div class="badge"></div>\n        </div>\n        <div class="label"></div>\n      '}static get observedAttributes(){return["state","number","limit","label"]}connectedCallback(){this.updateBadge()}attributeChangedCallback(t,n,e){this.updateBadge()}updateBadge(){const t=parseInt(this.getAttribute("number"),10)||0,n=parseInt(this.getAttribute("limit"),10)||1/0,e=this.getAttribute("label")||"",o=this.shadowRoot.querySelector(".badge"),s=this.shadowRoot.querySelector(".dot"),r=this.shadowRoot.querySelector(".label");if(t>0){const e=t>n?`${n}+`:t;o.textContent=e,o.dataset.multipleCharacters=e.length>1?"true":"false",o.style.display="flex",s.style.display="none"}else o.style.display="none",s.style.display="block";e?(r.textContent=e,r.style.display="block"):r.style.display="none"}}customElements.define("bpt-badge",t)},400:()=>{class t extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"})}connectedCallback(){this.shadowRoot.querySelector("button").addEventListener("click",(t=>{this.hasAttribute("waves")&&this.createWaveEffect(t),this.dispatchEvent(new CustomEvent("button-click",{bubbles:!0,composed:!0}))}))}createWaveEffect(t){const n=this.shadowRoot.querySelector("button"),e=this.getAttribute("waves")||"rgba(255, 255, 255, 0.3)",o=document.createElement("span");o.classList.add("wave"),o.style.setProperty("--wave-color",e);const s=n.getBoundingClientRect(),r=Math.max(s.width,s.height);o.style.width=o.style.height=`${r}px`;const a=t.clientX-s.left-r/2,i=t.clientY-s.top-r/2;o.style.left=`${a}px`,o.style.top=`${i}px`,n.appendChild(o),o.addEventListener("animationend",(()=>{o.remove()}))}getStyles(){return'\n            <style>\n                :host {\n                    display: inline-block;\n                }\n\n                /* Base button styles */\n                button {\n                    padding: 10px 24px;\n                    font-size: 1rem;\n                    font-family: \'Roboto\', Arial, sans-serif;\n                    font-weight: 500;\n                    letter-spacing: 0.02857em;\n                    text-transform: uppercase;\n                    cursor: pointer;\n                    border: none;\n                    border-radius: 8px; /* More rounded corners */\n                    transition: background-color 0.3s ease, box-shadow 0.3s ease, transform 0.3s ease;\n                    display: inline-flex;\n                    align-items: center;\n                    justify-content: center;\n                    position: relative;\n                    overflow: hidden; /* Required for the waves effect */\n                    gap: 12px; /* Increased space between icon and text */\n                }\n\n                /* Elevated button styles */\n                :host([mode="elevated"]) button {\n                    background-color: #ffffff;\n                    color: #039be5;\n                    box-shadow: 0px 1px 2px rgba(0, 0, 0, 0.2), 0px 1px 3px rgba(0, 0, 0, 0.1);\n                }\n\n                :host([mode="elevated"]) button:hover {\n                    box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.2), 0px 1px 8px rgba(0, 0, 0, 0.1);\n                    background-color: #e1f5fe;\n                }\n\n                /* Filled button styles */\n                :host([mode="filled"]) button {\n                    background-color: #03a9f4;\n                    color: #ffffff;\n                    box-shadow: none;\n                }\n\n                :host([mode="filled"]) button:hover {\n                    background-color: #0288d1;\n                }\n\n                /* Filled tonal button styles */\n                :host([mode="filled-tonal"]) button {\n                    background-color: #81d4fa;\n                    color: #ffffff;\n                    box-shadow: none;\n                }\n\n                :host([mode="filled-tonal"]) button:hover {\n                    background-color: #4fc3f7;\n                }\n\n                /* Outlined button styles */\n                :host([mode="outlined"]) button {\n                    background-color: transparent;\n                    color: #039be5;\n                    border: 1px solid #039be5;\n                    box-shadow: none;\n                }\n\n                :host([mode="outlined"]) button:hover {\n                    background-color: rgba(3, 169, 244, 0.08);\n                }\n\n                /* Text button styles */\n                :host([mode="text"]) button {\n                    background-color: transparent;\n                    color: #039be5;\n                    box-shadow: none;\n                }\n\n                :host([mode="text"]) button:hover {\n                    background-color: rgba(3, 169, 244, 0.08);\n                }\n\n                /* Waves effect */\n                .wave {\n                    position: absolute;\n                    border-radius: 50%;\n                    transform: scale(0);\n                    animation: ripple 0.6s linear;\n                    background-color: var(--wave-color, rgba(255, 255, 255, 0.3)); /* Default color */\n                }\n\n                @keyframes ripple {\n                    to {\n                        transform: scale(4);\n                        opacity: 0;\n                    }\n                }\n\n                /* Icon styling inside the button */\n                ::slotted(svg) {\n                    width: 20px;\n                    height: 20px;\n                    fill: currentColor;\n                }\n            </style>\n        '}}window.customElements.define("bpt-button",class extends t{constructor(){super(),this.shadowRoot.innerHTML=`\n            ${this.getStyles()}\n            <button>\n                <slot></slot>\n            </button>\n        `}}),window.customElements.define("bpt-button-modal",class extends t{constructor(){super(),this.shadowRoot.innerHTML=`\n            ${this.getStyles()}\n            <button>\n                <slot>Click Me</slot>\n            </button>\n        `}connectedCallback(){super.connectedCallback(),this.shadowRoot.querySelector("button").addEventListener("click",(()=>{const t=this.getAttribute("modalTrigger"),n=document.querySelector(`[modalTriggerName="${t}"]`);n&&n.setAttribute("open","")}))}})},736:()=>{class t extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"}),this.shadowRoot.innerHTML='\n            \x3c!-- Roboto Flex CDN --\x3e\n            <link href="https://fonts.googleapis.com/css2?family=Roboto+Flex:wght@100..1000&display=swap" rel="stylesheet">\n            \n            <style>\n                :host {\n                    display: inline-block;\n                }\n\n                /* Base button styles */\n                button {\n                    padding: 10px 24px;\n                    font-size: 1rem;\n                    font-family: \'Roboto Flex\', Arial, sans-serif; /* Use Roboto Flex */\n                    font-weight: 500;\n                    letter-spacing: 0.02857em;\n                    text-transform: uppercase;\n                    cursor: pointer;\n                    border: none;\n                    border-radius: 8px; /* More rounded corners */\n                    transition: background-color 0.3s ease, box-shadow 0.3s ease, transform 0.3s ease;\n                    display: inline-flex;\n                    align-items: center;\n                    justify-content: center;\n                    position: relative;\n                    overflow: hidden; /* Required for the waves effect */\n                    gap: 12px; /* Increased space between icon and text */\n                }\n\n                /* Elevated button styles */\n                :host([mode="elevated"]) button {\n                    background-color: #ffffff;\n                    color: #039be5;\n                    box-shadow: 0px 1px 2px rgba(0, 0, 0, 0.2), 0px 1px 3px rgba(0, 0, 0, 0.1);\n                }\n\n                :host([mode="elevated"]) button:hover {\n                    box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.2), 0px 1px 8px rgba(0, 0, 0, 0.1);\n                    background-color: #e1f5fe;\n                }\n\n                /* Filled button styles */\n                :host([mode="filled"]) button {\n                    background-color: #03a9f4;\n                    color: #ffffff;\n                    box-shadow: none;\n                }\n\n                :host([mode="filled"]) button:hover {\n                    background-color: #0288d1;\n                }\n\n                /* Filled tonal button styles */\n                :host([mode="filled-tonal"]) button {\n                    background-color: #81d4fa;\n                    color: #ffffff;\n                    box-shadow: none;\n                }\n\n                :host([mode="filled-tonal"]) button:hover {\n                    background-color: #4fc3f7;\n                }\n\n                /* Outlined button styles */\n                :host([mode="outlined"]) button {\n                    background-color: transparent;\n                    color: #039be5;\n                    border: 1px solid #039be5;\n                    box-shadow: none;\n                }\n\n                :host([mode="outlined"]) button:hover {\n                    background-color: rgba(3, 169, 244, 0.08);\n                }\n\n                /* Text button styles */\n                :host([mode="text"]) button {\n                    background-color: transparent;\n                    color: #039be5;\n                    box-shadow: none;\n                }\n\n                :host([mode="text"]) button:hover {\n                    background-color: rgba(3, 169, 244, 0.08);\n                }\n\n                /* Waves effect */\n                .wave {\n                    position: absolute;\n                    border-radius: 50%;\n                    transform: scale(0);\n                    animation: ripple 0.6s linear;\n                    background-color: var(--wave-color, rgba(255, 255, 255, 0.3)); /* Default color */\n                }\n\n                @keyframes ripple {\n                    to {\n                        transform: scale(4);\n                        opacity: 0;\n                    }\n                }\n\n                /* Icon styling inside the button */\n                ::slotted(svg) {\n                    width: 20px;\n                    height: 20px;\n                    fill: currentColor;\n                }\n\n                .icon-left {\n                    order: 0; /* Default order for left-aligned icon */\n                }\n\n                .icon-right {\n                    order: 1; /* Order to place icon on the right */\n                }\n            </style>\n            <button>\n                <span class="icon-left"><slot name="icon"></slot></span>\n                <slot></slot>\n            </button>\n        '}static get observedAttributes(){return["icon-position"]}attributeChangedCallback(t,n,e){"icon-position"===t&&this.updateIconPosition(e)}connectedCallback(){this.shadowRoot.querySelector("button").addEventListener("click",(t=>{this.hasAttribute("waves")&&this.createWaveEffect(t),this.dispatchEvent(new CustomEvent("button-click",{bubbles:!0,composed:!0}))})),this.updateIconPosition(this.getAttribute("icon-position"))}updateIconPosition(t){const n=this.shadowRoot.querySelector(".icon-left");"right"===t?(n.classList.remove("icon-left"),n.classList.add("icon-right")):(n.classList.remove("icon-right"),n.classList.add("icon-left"))}createWaveEffect(t){const n=this.shadowRoot.querySelector("button"),e=this.getAttribute("waves")||"rgba(255, 255, 255, 0.3)",o=document.createElement("span");o.classList.add("wave"),o.style.setProperty("--wave-color",e);const s=n.getBoundingClientRect(),r=Math.max(s.width,s.height);o.style.width=o.style.height=`${r}px`;const a=t.clientX-s.left-r/2,i=t.clientY-s.top-r/2;o.style.left=`${a}px`,o.style.top=`${i}px`,n.appendChild(o),o.addEventListener("animationend",(()=>{o.remove()}))}}window.customElements.define("bpt-button",t)},13:()=>{class t extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"});const t=document.createElement("link");t.href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:wght@400;500;600;700&display=swap",t.rel="stylesheet",this.shadowRoot.appendChild(t);const n=document.createElement("link");n.href="https://fonts.googleapis.com/css2?family=Roboto+Flex:wght@100..1000&display=swap",n.rel="stylesheet",this.shadowRoot.appendChild(n),this.shadowRoot.innerHTML+='\n    <style>\n        :host {\n            display: block;\n            font-family: \'Roboto Flex\', Arial, sans-serif; /* Use Roboto Flex */\n        }\n\n        .card {\n            border-radius: 16px;\n            padding: 16px;\n            position: relative;\n            transition: box-shadow 0.3s ease, background-color 0.3s ease;\n            \n            display: flex;\n            align-items: flex-start;\n            justify-content: flex-start;\n            flex-direction: column;\n        }\n\n        /* Elevated card styles */\n        :host([mode="elevated"]) .card {\n            background-color: var(--card-bg-color, #E1F5FE);\n            box-shadow: 0px 1px 3px rgba(0, 0, 0, 0.2), 0px 4px 6px rgba(0, 0, 0, 0.1);\n        }\n\n        /* Filled card styles */\n        :host([mode="filled"]) .card {\n            background-color: var(--card-bg-color, #B3E5FC);\n            box-shadow: none;\n        }\n\n        /* Outlined card styles */\n        :host([mode="outlined"]) .card {\n            background-color: #ffffff;\n            border: 1px solid #039be5;\n        }\n\n        .card-header {\n            display: flex;\n            flex-direction: column;\n            margin-bottom: 16px;\n        }\n\n        .card-title {\n            font-size: 1.25rem;\n            color: #000000;\n            margin: 0;\n\n             display: flex;\n            align-items: flex-start;\n            justify-content: flex-start;\n            flex-direction: column;\n        }\n\n        .card-subtitle {\n            font-size: 1rem;\n            color: #616161;\n            margin: 0;\n            margin-top: 4px;\n\n             display: flex;\n            align-items: flex-start;\n            justify-content: flex-start;\n            flex-direction: column;\n        }\n\n        .card-content {\n            font-size: 1rem;\n            color: #000000;\n        }\n\n        .card-icon {\n            position: absolute;\n            top: 8px;\n            right: 8px;\n            font-size: 1.5rem;\n            color: #039be5;\n            cursor: pointer;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n        }\n\n        .card-icon > ::slotted(*) {\n            display: inline-flex;\n        }\n    </style>\n    <div class="card">\n        <div class="card-icon">\n            <slot name="icon"></slot>\n        </div>\n        <div class="card-header">\n            <div class="card-title"></div>\n            <div class="card-subtitle"></div>\n        </div>\n        <div class="card-content">\n            <slot></slot>\n        </div>\n    </div>\n    '}static get observedAttributes(){return["title","subtitle","content","mode"]}connectedCallback(){this.updateCard()}attributeChangedCallback(t,n,e){this.updateCard()}updateCard(){const t=this.getAttribute("title")||"";this.shadowRoot.querySelector(".card-title").textContent=t;const n=this.getAttribute("subtitle")||"";this.shadowRoot.querySelector(".card-subtitle").textContent=n;const e=this.getAttribute("content")||"";this.shadowRoot.querySelector(".card-content").innerHTML=e}}window.customElements.define("bpt-card-basic",t)},998:()=>{class t extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"});const t=document.createElement("link");t.href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:wght@400;500;600;700&display=swap",t.rel="stylesheet",this.shadowRoot.appendChild(t);const n=document.createElement("link");n.href="https://fonts.googleapis.com/css2?family=Roboto+Flex:wght@100..1000&display=swap",n.rel="stylesheet",this.shadowRoot.appendChild(n),this.shadowRoot.innerHTML+='\n          <style>\n            :host {\n              display: block;\n              font-family: \'Roboto Flex\', Arial, sans-serif; /* Use Roboto Flex */\n            }\n    \n            .card {\n              border-radius: 16px;\n              padding: 16px;\n              position: relative;\n              transition: box-shadow 0.3s ease, background-color 0.3s ease;\n              overflow: hidden;\n\n               display: flex;\n                align-items: flex-start;\n                justify-content: flex-start;\n                flex-direction: column;\n            }\n    \n            /* Elevated card styles */\n            :host([mode="elevated"]) .card {\n              background-color: var(--card-bg-color, #E1F5FE);\n              box-shadow: 0px 1px 3px rgba(0, 0, 0, 0.2), 0px 4px 6px rgba(0, 0, 0, 0.1);\n            }\n    \n            /* Filled card styles */\n            :host([mode="filled"]) .card {\n              background-color: var(--card-bg-color, #B3E5FC);\n              box-shadow: none;\n            }\n    \n            /* Outlined card styles */\n            :host([mode="outlined"]) .card {\n              background-color: #ffffff;\n              border: 1px solid #039be5;\n            }\n    \n            .card-header {\n              display: flex;\n              flex-direction: column;\n              justify-content: space-between;\n              margin-bottom: 16px;\n            }\n    \n            .card-title {\n              font-size: 1.25rem;\n              color: #000000;\n              margin: 0;\n\n               display: flex;\n            align-items: flex-start;\n            justify-content: flex-start;\n            flex-direction: column;\n            }\n    \n            .card-subtitle {\n              font-size: 1rem;\n              color: #666666;\n              margin: 4px 0 0 0;\n\n               display: flex;\n            align-items: flex-start;\n            justify-content: flex-start;\n            flex-direction: column;\n            }\n    \n            .card-content {\n              font-size: 1rem;\n              color: #000000;\n            }\n    \n            .card-icon {\n              position: absolute;\n              top: 20px;\n              right: 20px;\n              font-size: 1.5rem;\n              color: #039be5;\n              cursor: pointer;\n              display: flex;\n              align-items: center;\n              justify-content: center;\n            }\n    \n            .card-icon > ::slotted(*) {\n              display: inline-flex;\n            }\n    \n            .card-image {\n              width: calc(100% + 32px);\n              position: relative;\n              right: 16px;\n              bottom: 20px;\n              height: 200px;\n              background-position: center;\n              background-size: cover;\n              background-repeat: no-repeat;\n              border-radius: 16px 16px 16px 16px;\n            }\n    \n            :host([fixed-image="true"]) .card-image {\n              background-attachment: fixed;\n            }\n    \n            .button-container {\n              position: absolute;\n              top: 12px;\n              right: 12px;\n            }\n          </style>\n          <div class="card">\n            <div class="card-image">\n              <div class="button-container">\n                <slot name="icon-button"></slot>\n              </div>\n            </div>\n            <div class="card-header">\n              <div class="card-title"></div>\n              <div class="card-subtitle"></div>\n            </div>\n            <div class="card-content">\n              <slot></slot>\n            </div>\n          </div>\n        '}static get observedAttributes(){return["title","subtitle","content","mode","image","fixed-image"]}connectedCallback(){this.updateCard()}attributeChangedCallback(t,n,e){this.updateCard()}updateCard(){const t=this.getAttribute("title")||"";this.shadowRoot.querySelector(".card-title").textContent=t;const n=this.getAttribute("subtitle")||"";this.shadowRoot.querySelector(".card-subtitle").textContent=n;const e=this.getAttribute("content")||"";this.shadowRoot.querySelector(".card-content").innerHTML=e;const o=this.getAttribute("image");o&&(this.shadowRoot.querySelector(".card-image").style.backgroundImage=`url('${o}')`)}}window.customElements.define("bpt-card-image",t)},947:()=>{class t extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"});const t=document.createElement("link");t.href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:wght@400;500;600;700&display=swap",t.rel="stylesheet",this.shadowRoot.appendChild(t);const n=document.createElement("link");n.href="https://fonts.googleapis.com/css2?family=Roboto+Flex:wght@100..1000&display=swap",n.rel="stylesheet",this.shadowRoot.appendChild(n),this.shadowRoot.innerHTML+='\n      <style>\n        :host {\n          display: inline-flex;\n          align-items: center;\n          background-color: var(--chip-bg-color, #E1F5FE); /* Light tone from the palette */\n          color: var(--chip-text-color, #000000);\n          border-radius: 6px; /* Less rounded, more squared */\n          padding: 0.25rem 0.75rem;\n          font-family: \'Roboto Flex\', Arial, sans-serif; /* Use Roboto Flex */\n          font-size: 0.875rem;\n          font-weight: 500;\n          box-shadow: 0px 1px 2px rgba(0, 0, 0, 0.2), 0px 1px 3px rgba(0, 0, 0, 0.1);\n          cursor: pointer;\n          transition: background-color 0.3s ease, box-shadow 0.3s ease;\n          position: relative;\n          overflow: hidden; /* Required for the waves effect */\n          min-height: 32px;\n        }\n\n        :host([hidden]) {\n          display: none;\n        }\n\n        :host([active="false"]) {\n          opacity: 0.5;\n          pointer-events: none;\n        }\n\n        .chip-icon {\n          display: flex;\n          align-items: center;\n          justify-content: center;\n          order: var(--icon-order, 0);\n          margin-right: var(--icon-margin-right, 0.5rem);\n          margin-left: var(--icon-margin-left, 0);\n        }\n\n        .chip-content {\n          flex: 1;\n          order: 1;\n        }\n\n        :host([mode="focus-toggle"].focused) {\n          box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.2), 0px 3px 6px rgba(0, 0, 0, 0.15);\n          background-color: var(--chip-focus-bg-color, #B3E5FC); /* Lighter tone from the palette */\n          color: var(--chip-focus-text-color, #000000);\n        }\n\n        :host([mode="focus-toggle"]:not(.focused):hover) {\n          background-color: var(--chip-hover-bg-color, #81D4FA); /* Light tone from the palette */\n        }\n\n        /* Waves effect */\n        .wave {\n          position: absolute;\n          border-radius: 50%;\n          transform: scale(0);\n          animation: ripple 0.6s linear;\n          background-color: var(--wave-color, rgba(255, 255, 255, 0.3)); /* Default color */\n        }\n\n        @keyframes ripple {\n          to {\n            transform: scale(4);\n            opacity: 0;\n          }\n        }\n\n        .chip-icon ::slotted(svg) {\n          width: 20px;\n          height: 20px;\n          fill: currentColor;\n        }\n\n        .chip-icon ::slotted(img) {\n          width: 20px;\n          height: 20px;\n        }\n      </style>\n\n      \x3c!-- Slot for custom icon --\x3e\n      <span class="chip-icon">\n        <slot name="icon"></slot>\n      </span>\n\n      \x3c!-- Chip content --\x3e\n      <span class="chip-content" id="content"></span>\n\n      \x3c!-- Optional close icon --\x3e\n      <slot name="close-icon"></slot>\n    '}static get observedAttributes(){return["content","mode","icon-position","waves","active"]}connectedCallback(){this.render(),this.setupEventListeners(),this.updateIconPosition(),this.updateActiveState()}attributeChangedCallback(t,n,e){"content"===t?this.render():"icon-position"===t?this.updateIconPosition():"active"===t&&this.updateActiveState()}render(){const t=this.getAttribute("content")||"";this.shadowRoot.querySelector("#content").textContent=t}setupEventListeners(){const t=this.getAttribute("mode");"close"===t?this.addEventListener("click",(()=>this.remove())):"focus-toggle"===t&&this.addEventListener("click",(()=>{this.classList.toggle("focused")})),this.hasAttribute("waves")&&this.addEventListener("click",(t=>this.createWaveEffect(t)))}updateIconPosition(){const t=this.getAttribute("icon-position"),n=this.shadowRoot.querySelector(".chip-icon");"right"===t?(n.style.setProperty("--icon-order","2"),n.style.setProperty("--icon-margin-right","0"),n.style.setProperty("--icon-margin-left","0.5rem")):(n.style.setProperty("--icon-order","0"),n.style.setProperty("--icon-margin-right","0.5rem"),n.style.setProperty("--icon-margin-left","0"))}updateActiveState(){const t="false"!==this.getAttribute("active");this.style.opacity=t?"1":"0.5",this.style.pointerEvents=t?"auto":"none"}createWaveEffect(t){const n=this.shadowRoot.host,e=this.getAttribute("waves")||"rgba(255, 255, 255, 0.3)",o=document.createElement("span");o.classList.add("wave"),o.style.setProperty("--wave-color",e);const s=n.getBoundingClientRect(),r=Math.max(s.width,s.height);o.style.width=o.style.height=`${r}px`;const a=t.clientX-s.left-r/2,i=t.clientY-s.top-r/2;o.style.left=`${a}px`,o.style.top=`${i}px`,n.appendChild(o),o.addEventListener("animationend",(()=>{o.remove()}))}disconnectedCallback(){this.removeEventListener("click",this.handleMode)}}customElements.define("bpt-chip",t)},189:()=>{const t={US:{symbol:"$",position:"left",thousandSeparator:",",decimalSeparator:"."},EC:{symbol:"$",position:"right",thousandSeparator:".",decimalSeparator:","},PE:{symbol:"S/",position:"left",thousandSeparator:",",decimalSeparator:"."},MX:{symbol:"$",position:"left",thousandSeparator:",",decimalSeparator:"."},CL:{symbol:"$",position:"left",thousandSeparator:".",decimalSeparator:","},ES:{symbol:"€",position:"right",thousandSeparator:".",decimalSeparator:","},AR:{symbol:"$",position:"left",thousandSeparator:".",decimalSeparator:","},CO:{symbol:"$",position:"left",thousandSeparator:".",decimalSeparator:","}};class n extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"});const t=document.createElement("link");t.href="https://fonts.googleapis.com/css2?family=Roboto+Flex:wght@100..1000&display=swap",t.rel="stylesheet",this.shadowRoot.appendChild(t),this.shadowRoot.innerHTML+='\n      <style>\n        :host {\n          --currency-color: #000;\n          --currency-font-size: 1.6rem;\n          --currency-symbol-margin: 0.2rem;\n          --currency-font-family: \'Roboto Flex\', Arial, sans-serif; /* Use Roboto Flex */\n        }\n\n        div {\n          color: var(--currency-color);\n          font-size: var(--currency-font-size);\n          font-family: var(--currency-font-family);\n          display: block;\n        }\n\n        sup {\n          font-size: 1em;\n        }\n\n        .currency-symbol {\n          margin-right: var(--currency-symbol-margin);\n        }\n      </style>\n\n      \x3c!-- Slot for injecting custom styles --\x3e\n      <slot name="custom-styles"></slot>\n\n      <div part="result-container">\n        <div id="result"></div>\n      </div>\n    '}static get observedAttributes(){return["locale","amount"]}connectedCallback(){this.updateResult()}attributeChangedCallback(){this.updateResult()}updateResult(){const t=this.getAttribute("locale")||"US",n=this.getAttribute("amount")||"0";if(isNaN(n))return void(this.shadowRoot.querySelector("#result").textContent="Invalid number");const e=this.formatCurrency(n,t);this.shadowRoot.querySelector("#result").innerHTML=e}formatCurrency(n,e){const o=t[e.toUpperCase()]||t.US,s=parseFloat(n).toFixed(2),[r,a]=s.split(".");let i;return i=parseInt(r,10)>=1e6?r.replace(/\B(?=(\d{3})+(?!\d))/g,"'"):r.replace(/\B(?=(\d{3})+(?!\d))/g,o.thousandSeparator),"left"===o.position?`${o.symbol} ${i}<sup>${o.decimalSeparator}${a}</sup>`:`${i}<sup>${o.decimalSeparator}${a}</sup> ${o.symbol}`}}customElements.define("bpt-currency-converter",n)},572:()=>{class t extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"}),this.shadowRoot.innerHTML='\n            <style>\n                :host {\n                    display: inline-block;\n                }\n\n                /* Base button styles */\n                button {\n                    padding: 10px;\n                    font-size: 1.5rem; /* Tamaño del ícono */\n                    background-color: transparent;\n                    color: #039be5;\n                    border: none;\n                    border-radius: 12px; /* Forma circular */\n                    cursor: pointer;\n                    display: inline-flex;\n                    align-items: center;\n                    justify-content: center;\n                    transition: background-color 0.3s ease, box-shadow 0.3s ease, transform 0.3s ease;\n                    position: var(--button-position, relative); /* Fijo o relativo */\n                    top: var(--button-top, auto);\n                    bottom: var(--button-bottom, auto);\n                    left: var(--button-left, auto);\n                    right: var(--button-right, auto);\n                    overflow: hidden; /* Asegura que el efecto wave se mantenga dentro del botón */\n                    z-index: 10000;\n                }\n\n                /* Estilo para el atributo large */\n                :host([large]) button {\n                    width: 70px; /* Botón más grande */\n                    height: 70px; /* Botón más grande */\n                    font-size: 2rem; /* Ícono más grande */\n                }\n\n                /* Estilo para el atributo pulse */\n                :host([pulse]) button {\n                    animation: pulseEffect 1.5s infinite;\n                }\n\n                @keyframes pulseEffect {\n                    0% {\n                        transform: scale(1);\n                    }\n                    50% {\n                        transform: scale(1.1);\n                    }\n                    100% {\n                        transform: scale(1);\n                    }\n                }\n\n                /* Elevated button styles */\n                :host([mode="elevated"]) button {\n                    background-color: #ffffff;\n                    color: #039be5;\n                    box-shadow: 0px 1px 2px rgba(0, 0, 0, 0.2), 0px 1px 3px rgba(0, 0, 0, 0.1);\n                }\n\n                :host([mode="elevated"]) button:hover {\n                    box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.2), 0px 1px 8px rgba(0, 0, 0, 0.1);\n                    background-color: #e1f5fe;\n                }\n\n                /* Filled button styles */\n                :host([mode="filled"]) button {\n                    background-color: #03a9f4;\n                    color: #ffffff;\n                    box-shadow: none;\n                }\n\n                :host([mode="filled"]) button:hover {\n                    background-color: #0288d1;\n                }\n\n                /* Filled tonal button styles */\n                :host([mode="filled-tonal"]) button {\n                    background-color: #81d4fa;\n                    color: #ffffff;\n                    box-shadow: none;\n                }\n\n                :host([mode="filled-tonal"]) button:hover {\n                    background-color: #4fc3f7;\n                }\n\n                /* Outlined button styles */\n                :host([mode="outlined"]) button {\n                    background-color: transparent;\n                    color: #039be5;\n                    border: 1px solid #039be5;\n                    box-shadow: none;\n                }\n\n                :host([mode="outlined"]) button:hover {\n                    background-color: rgba(3, 169, 244, 0.08);\n                }\n\n                /* Text button styles */\n                :host([mode="text"]) button {\n                    background-color: transparent;\n                    color: #039be5;\n                    box-shadow: none;\n                }\n\n                :host([mode="text"]) button:hover {\n                    background-color: rgba(3, 169, 244, 0.08);\n                }\n\n                /* Waves effect */\n                .wave {\n                    position: absolute;\n                    border-radius: 50%;\n                    width: 100px;\n                    height: 100px;\n                    background-color: var(--wave-color, rgba(255, 255, 255, 0.3)); /* Color por defecto */\n                    transform: scale(0);\n                    animation: ripple 0.6s linear;\n                    pointer-events: none; /* Asegura que no interfiera con los clics del botón */\n                }\n\n                @keyframes ripple {\n                    to {\n                        transform: scale(2);\n                        opacity: 0;\n                    }\n                }\n\n                /* Icon styling inside the button */\n                ::slotted(svg) {\n                    width: 24px;\n                    height: 24px;\n                    fill: currentColor;\n                }\n            </style>\n            <button>\n                <slot></slot>\n            </button>\n        '}static get observedAttributes(){return["fixed","position-top","position-bottom","position-left","position-right","mode","large","pulse"]}connectedCallback(){this.shadowRoot.querySelector("button").addEventListener("click",(t=>{this.hasAttribute("waves")&&this.createWaveEffect(t),this.dispatchEvent(new CustomEvent("button-click",{bubbles:!0,composed:!0}))})),this.updatePositioning()}attributeChangedCallback(t,n,e){["fixed","position-top","position-bottom","position-left","position-right"].includes(t)&&this.updatePositioning()}updatePositioning(){const t=this.shadowRoot.querySelector("button");"true"===this.getAttribute("fixed")?(t.style.setProperty("--button-position","fixed"),t.style.setProperty("--button-top",this.getAttribute("position-top")||"auto"),t.style.setProperty("--button-bottom",this.getAttribute("position-bottom")||"auto"),t.style.setProperty("--button-left",this.getAttribute("position-left")||"auto"),t.style.setProperty("--button-right",this.getAttribute("position-right")||"auto")):(t.style.setProperty("--button-position","relative"),t.style.setProperty("--button-top","auto"),t.style.setProperty("--button-bottom","auto"),t.style.setProperty("--button-left","auto"),t.style.setProperty("--button-right","auto"))}createWaveEffect(t){const n=this.shadowRoot.querySelector("button"),e=this.getAttribute("waves")||"rgba(255, 255, 255, 0.3)",o=document.createElement("span");o.classList.add("wave"),o.style.backgroundColor=e;const s=n.getBoundingClientRect(),r=Math.max(s.width,s.height);o.style.width=o.style.height=2*r+"px",o.style.left=t.clientX-s.left-r+"px",o.style.top=t.clientY-s.top-r+"px",n.appendChild(o),o.addEventListener("animationend",(()=>{o.remove()}))}}window.customElements.define("bpt-icon-button",t)},565:()=>{class t extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"});const t=document.createElement("link");t.href="https://fonts.googleapis.com/css2?family=Roboto+Flex:wght@100..1000&display=swap",t.rel="stylesheet",this.shadowRoot.appendChild(t);const n=document.createElement("link");n.href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined",n.rel="stylesheet",this.shadowRoot.appendChild(n),this.shadowRoot.innerHTML+='\n\t\t\t<style>\n\t\t\t\t/* General styles for the modal background */\n\t\t\t\t.modal {\n\t\t\t\t\tdisplay: flex;\n\t\t\t\t\tposition: fixed;\n\t\t\t\t\ttop: 0;\n\t\t\t\t\tleft: 0;\n\t\t\t\t\twidth: 100%;\n\t\t\t\t\theight: 100%;\n\t\t\t\t\tbackground-color: rgba(0, 0, 0, 0.5);\n\t\t\t\t\tbackdrop-filter: blur(10px); /* Apply blur effect */\n\t\t\t\t\tjustify-content: center;\n\t\t\t\t\talign-items: center;\n\t\t\t\t\topacity: 0;\n\t\t\t\t\tpointer-events: none;\n\t\t\t\t\ttransition: opacity 0.3s ease;\n\t\t\t\t\tz-index: 10000; /* Ensure the modal is on top of everything */\n\t\t\t\t}\n\n\t\t\t\t.modal[open] {\n\t\t\t\t\topacity: 1;\n\t\t\t\t\tpointer-events: auto;\n\t\t\t\t}\n\n\t\t\t\t.modal[closing] {\n\t\t\t\t\topacity: 0;\n\t\t\t\t\tpointer-events: none;\n\t\t\t\t}\n\n\t\t\t\t/* Modal content styles */\n\t\t\t\t.modal-content {\n\t\t\t\t\tbackground-color: var(--md-sys-color-surface, #ffffff);\n\t\t\t\t\tpadding: 24px;\n\t\t\t\t\tborder-radius: 12px;\n\t\t\t\t\tbox-shadow: var(--md-sys-elevation-3, 0 4px 6px rgba(0, 0, 0, 0.15));\n\t\t\t\t\tposition: relative;\n\t\t\t\t\twidth: 80%;\n\t\t\t\t\tmax-width: 600px;\n\t\t\t\t\tmax-height: 450px; /* Set the max-height for the modal content */\n\t\t\t\t\toverflow-y: auto; /* Enable vertical scroll if content exceeds max-height */\n\t\t\t\t\ttransition: box-shadow 0.3s ease, transform 0.3s ease;\n\t\t\t\t\ttransform: translateY(50px);\n\t\t\t\t}\n\n\t\t\t\t.modal[open] .modal-content {\n\t\t\t\t\ttransform: translateY(0);\n\t\t\t\t\tbox-shadow: var(--md-sys-elevation-4, 0 6px 10px rgba(0, 0, 0, 0.2));\n\t\t\t\t}\n\n\t\t\t\t/* Modal header styles */\n\t\t\t\t.modal-header {\n\t\t\t\t\tdisplay: flex;\n\t\t\t\t\tjustify-content: space-between;\n\t\t\t\t\talign-items: center;\n\t\t\t\t\tpadding-bottom: 16px;\n\t\t\t\t\tborder-bottom: 1px solid var(--md-sys-color-outline, #ccc);\n\t\t\t\t\tmargin-bottom: 16px;\n\t\t\t\t}\n\n\t\t\t\t.modal-title {\n\t\t\t\t\tfont-size: 1.5rem;\n\t\t\t\t\tmargin: 0;\n\t\t\t\t\tcolor: var(--md-sys-color-on-surface, #333);\n\t\t\t\t\tfont-family: \'Roboto Flex\', Arial, sans-serif;\n\t\t\t\t}\n\n\t\t\t\t/* Additional styles for modal content */\n\t\t\t\t.modal-content p {\n\t\t\t\t\tfont-size: 1rem;\n\t\t\t\t\tline-height: 1.6;\n\t\t\t\t\tcolor: var(--md-sys-color-on-surface-variant, #555);\n\t\t\t\t\tfont-family: \'Roboto Flex\', Arial, sans-serif;\n\t\t\t\t}\n\n\t\t\t\t.modal-content h1, .modal-content h2, .modal-content h3 {\n\t\t\t\t\tmargin-top: 0;\n\t\t\t\t\tcolor: var(--md-sys-color-on-surface, #333);\n\t\t\t\t}\n\n\t\t\t\t/* Styles for dynamic content added to the modal */\n\t\t\t\t.additional-content {\n\t\t\t\t\tmargin-top: 20px;\n\t\t\t\t}\n\n\t\t\t\t/* Footer styles */\n\t\t\t\t.modal-footer {\n\t\t\t\t\tbox-sizing: border-box;\n\t\t\t\t\tdisplay: flex;\n\t\t\t\t\tjustify-content: flex-end;\n\t\t\t\t\talign-items: center;\n\t\t\t\t\tgap: 16px;\n\t\t\t\t\tpadding: 16px 16px; /* Remove horizontal padding */\n\t\t\t\t\tbackground-color: var(--md-sys-color-surface, #ffffff);\n\t\t\t\t\tborder-top: 1px solid var(--md-sys-color-outline, #ccc);\n\t\t\t\t\tposition: relative;\n\t\t\t\t\tbottom: -24px;\n\t\t\t\t\tleft: -24px;\n\t\t\t\t\twidth: calc(100% + 48px); /* Adjust width to account for content padding */\n\t\t\t\t\tbox-shadow: var(--md-sys-elevation-1, 0 -2px 4px rgba(0, 0, 0, 0.1));\n\t\t\t\t}\n\t\t\t</style>\n\n\t\t\t<div class="modal">\n\t\t\t\t<div class="modal-content">\n\t\t\t\t\t<div class="modal-header">\n\t\t\t\t\t\t<h2 class="modal-title"></h2>\n\t\t\t\t\t\t<bpt-icon-button mode="text" fixed="false" waves="rgba(0, 150, 136, 0.2)">\n\t\t\t\t\t\t\t<span class="material-symbols-outlined">close</span>\n\t\t\t\t\t\t</bpt-icon-button>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class="additional-content"></div>\n\t\t\t\t\t<div class="modal-body">\n\t\t\t\t\t\t<slot></slot>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class="modal-footer">\n\t\t\t\t\t\t<slot name="footer"></slot>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t'}connectedCallback(){const t=this.shadowRoot.querySelector(".modal"),n=this.shadowRoot.querySelector("bpt-icon-button"),e=this.shadowRoot.querySelector(".modal-title"),o=this.shadowRoot.querySelector(".additional-content"),s=this.getAttribute("modal-title");s&&(e.textContent=s);const r=this.getAttribute("modal-content");r&&(o.innerHTML=r),n.addEventListener("click",(()=>{this.closeModal(t)})),t.addEventListener("click",(n=>{n.target===t&&this.closeModal(t)})),this.hasAttribute("open")&&t.setAttribute("open","")}static get observedAttributes(){return["open","modal-title","modal-content"]}attributeChangedCallback(t,n,e){const o=this.shadowRoot.querySelector(".modal"),s=this.shadowRoot.querySelector(".modal-title"),r=this.shadowRoot.querySelector(".additional-content");"open"===t&&(null!==e?o.setAttribute("open",""):this.closeModal(o)),"modal-title"===t&&(s.textContent=e||""),"modal-content"===t&&(r.innerHTML=e||"")}closeModal(t){t.setAttribute("closing",""),setTimeout((()=>{t.removeAttribute("open"),t.removeAttribute("closing"),this.removeAttribute("open")}),300)}}window.customElements.define("bpt-modal",t)},800:()=>{class t extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"}),this.isCollapsed=!this.hasAttribute("open")||"false"===this.getAttribute("open"),this.shadowRoot.innerHTML=`\n            <style>\n                @import url('https://fonts.googleapis.com/css2?family=Roboto+Flex:wght@300;400;500&display=swap');\n                @import url('https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:wght@300&display=swap');\n\n                .sidebar {\n                    width: 250px;\n                    height: 100vh;\n                    background-color: #FFF;\n                    padding: 20px 10px;\n                    position: fixed;\n                    top: 0;\n                    left: 0;\n                    overflow-y: auto;\n                    box-shadow: 2px 0 5px rgba(0, 0, 0, 0.1);\n                    font-family: 'Roboto Flex', sans-serif;\n                    z-index: 100002;\n                    display: flex;\n                    flex-direction: column;\n                    justify-content: space-between;\n                    transition: width 0.3s ease;\n                }\n\n                .sidebar.collapsed {\n                    width: 74px;\n                }\n\n                .sidebar img {\n                    display: none;\n                    width: 50px;\n                    height: 50px;\n                    margin-bottom: 20px;\n                    border-radius: 50%;\n                }\n\n                .sidebar.collapsed img {\n                    display: block;\n                    margin-left: auto;\n                    margin-right: auto;\n                }\n\n                .sidebar h2 {\n                    color: #01579B;\n                    font-size: 20px;\n                    margin-bottom: 20px;\n                    text-align: left;\n                }\n\n                .sidebar.collapsed h2 {\n                    display: none;\n                }\n\n                .sidebar ul {\n                    width: 100%;\n                    list-style: none;\n                    padding: 0;\n                    flex-grow: 1;\n                }\n\n                .sidebar ul li {\n                    margin-bottom: 10px;\n                    display: flex;\n                    align-items: center;\n                }\n\n                .sidebar ul li a {\n                    width: 100%;\n                    color: #01579B;\n                    text-decoration: none;\n                    font-size: 18px;\n                    display: block;\n                    padding: 10px 16px;\n                    border-radius: 50px;\n                    transition: background-color 0.3s, padding 0.3s ease;\n                    cursor: pointer;\n                    display: flex;\n                    align-items: center;\n                    flex-direction: row;\n                }\n\n                .sidebar ul li a:hover {\n                    background-color: #EEE;\n                }\n\n                .sidebar ul li a.active {\n                    background-color: #B3E5FC;\n                }\n\n                .sidebar ul li a .material-symbols-outlined {\n                    margin-right: 10px;\n                    font-size: 24px;\n                    color: #01579B;\n                    transition: margin-right 0.3s ease;\n                }\n\n                .sidebar.collapsed ul li a {\n                    justify-content: center;\n                    flex-direction: column;\n                    width: 50px;\n                    height: 6px;\n                    padding: 12px;\n                    position: relative;\n                    margin-bottom: 10px;\n                }\n\n                .sidebar.collapsed ul li a .material-symbols-outlined {\n                    margin-right: 0;\n                    margin-top: 18px;\n                    margin-bottom: 5px;\n                }\n\n                .sidebar.collapsed ul li a .menu-text {\n                    display: block;\n                    font-size: 12px;\n                    text-align: center;\n                }\n\n                .toggle-btn {\n                    color: #01579B;\n                    text-decoration: none;\n                    font-size: 18px;\n                    padding: 10px 16px;\n                    border-radius: 50px;\n                    transition: background-color 0.3s, padding 0.3s ease;\n                    cursor: pointer;\n                    display: flex;\n                    align-items: center;\n                    justify-content: center;\n                    background-color: #01579B;\n                    color: #FFFFFF;\n                    margin-top: auto;\n                    margin-bottom: 50px;\n                }\n\n                .toggle-btn:hover {\n                    background-color: #0277BD;\n                }\n\n                .toggle-btn .material-symbols-outlined {\n                    font-size: 24px;\n                    color: #FFFFFF;\n                }\n\n                .sidebar.collapsed .toggle-btn .menu-text {\n                    display: none;\n                }\n            </style>\n            <div class="sidebar ${this.isCollapsed?"collapsed":""}">\n                <div>\n                    <img src="https://media.licdn.com/dms/image/v2/D560BAQEV9JukUYDdug/company-logo_200_200/company-logo_200_200/0/1686104929154/yaganaste_logo?e=2147483647&v=beta&t=L81tqWq-sjTUm6o5NhHVcOdQr4lCliEsK-MsNOvOa2o" alt="Logo">\n                    <h2>Opciones</h2>\n                    <ul></ul>\n                </div>\n                <a class="toggle-btn">\n                    <span class="material-symbols-outlined">${this.isCollapsed?"menu":"close"}</span>\n                </a>\n            </div>\n            <main>\n                \x3c!-- Aquí va el contenido principal --\x3e\n            </main>\n        `}connectedCallback(){const t=this.shadowRoot.querySelector("ul"),n=this.getAttribute("items"),e=this.getAttribute("defaultsection"),o=this.shadowRoot.querySelector(".toggle-btn");if(n){const o=JSON.parse(n);o.forEach((n=>{const e=document.createElement("li"),o=document.createElement("a"),s=document.createElement("span");s.classList.add("material-symbols-outlined"),s.textContent=n.icon||"apps",o.appendChild(s),o.insertAdjacentHTML("beforeend",`<span class="menu-text">${n.name}</span>`),o.setAttribute("data-target",n.link),e.appendChild(o),t.appendChild(e),o.addEventListener("click",(t=>{t.preventDefault(),this.showSection(n.link),this.updateActiveLink(o)}))})),e?(this.showSection(e),this.setInitialActiveLink(e,o)):o.length>0&&(this.showSection(o[0].link),this.updateActiveLink(t.querySelector("a")))}o.addEventListener("click",(()=>{this.toggleSidebar()}))}toggleSidebar(){const t=this.shadowRoot.querySelector(".sidebar"),n=this.shadowRoot.querySelector(".toggle-btn");this.isCollapsed=!this.isCollapsed,t.classList.toggle("collapsed",this.isCollapsed);const e=this.isCollapsed?"menu":"close";n.querySelector("span").textContent=e}showSection(t){document.querySelectorAll("section").forEach((t=>{t.style.display="none"}));const n=document.querySelector(t);n&&(n.style.display="block")}updateActiveLink(t){this.shadowRoot.querySelectorAll("a").forEach((t=>{t.classList.remove("active")})),t.classList.add("active")}setInitialActiveLink(t,n){const e=this.shadowRoot.querySelector("ul");if(n.find((n=>n.link===t))){const n=e.querySelector(`a[data-target='${t}']`);this.updateActiveLink(n)}}static get observedAttributes(){return["open"]}attributeChangedCallback(t,n,e){"open"===t&&(this.isCollapsed="true"!==e,this.updateSidebarState())}updateSidebarState(){const t=this.shadowRoot.querySelector(".sidebar"),n=this.shadowRoot.querySelector(".toggle-btn");t.classList.toggle("collapsed",this.isCollapsed);const e=this.isCollapsed?"menu":"close";n.querySelector("span").textContent=e}}window.customElements.define("bpt-sidebar",t)},413:()=>{class t extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"}),this.currentStep=0,this.steps=[],this.instructionData=[],this.characterType="number",this.jumpEnabled=!1,this.shadowRoot.innerHTML='\n\t\t<style>\n\t\t  :host {\n\t\t\t--stepper-color: #007bff;\n\t\t\t--stepper-background: #f1f1f1;\n\t\t\t--stepper-completed-color: #28a745;\n\t\t\t--stepper-inactive-color: #eee;\n\t\t\t--stepper-font-family: Arial, sans-serif;\n\t\t\twidth: 100%;\n\t\t\tdisplay: block;\n\t\t  }\n  \n\t\t  .stepper {\n\t\t\tdisplay: flex;\n\t\t\talign-items: center;\n\t\t\tjustify-content: space-between;\n\t\t\tfont-family: var(--stepper-font-family);\n\t\t\twidth: 100%;\n\t\t  }\n  \n\t\t  .step {\n\t\t\tposition: relative;\n\t\t\tpadding: 0.5rem;\n\t\t\tbackground-color: var(--stepper-background);\n\t\t\tborder-radius: 50%;\n\t\t\tdisplay: flex;\n\t\t\talign-items: center;\n\t\t\tjustify-content: center;\n\t\t\tcursor: pointer;\n\t\t\tfont-size: 1.2rem;\n\t\t\tcolor: var(--stepper-color);\n\t\t\tz-index: 1;\n\t\t\ttransition: background-color 0.3s ease, color 0.3s ease;\n\t\t\twidth: 30px;\n\t\t\theight: 30px;\n\t\t  }\n  \n\t\t  .step.active {\n\t\t\tbackground-color: var(--stepper-color);\n\t\t\tcolor: #fff;\n\t\t  }\n  \n\t\t  .step.completed {\n\t\t\tbackground-color: var(--stepper-completed-color);\n\t\t\tcolor: #fff;\n\t\t  }\n  \n\t\t  .connector {\n\t\t\tflex-grow: 1;\n\t\t\theight: 10px;\n\t\t\tbackground: linear-gradient(90deg, var(--stepper-inactive-color) 100%, var(--stepper-background) 0%);\n\t\t\tmargin: 0 -1px;\n\t\t\tz-index: 0;\n\t\t\ttransition: background 0.3s ease;\n\t\t  }\n  \n\t\t  .navigation-buttons {\n\t\t\tmargin-top: 1rem;\n\t\t\tdisplay: flex;\n\t\t\tjustify-content: space-between;\n\t\t  }\n  \n\t\t  .instruction {\n\t\t\tmargin-top: 1rem;\n\t\t\tfont-size: 1rem;\n\t\t\ttext-align: center;\n\t\t  }\n  \n\t\t  /* Hide connectors if show-connector is false */\n\t\t  :host([show-connector="false"]) .connector {\n\t\t\tdisplay: none;\n\t\t  }\n\t\t</style>\n  \n\t\t\x3c!-- Stepper Container --\x3e\n\t\t<div class="stepper" id="stepper-container"></div>\n  \n\t\t\x3c!-- Instruction Text --\x3e\n\t\t<div class="instruction" id="instruction-text"></div>\n  \n\t\t\x3c!-- Navigation Buttons --\x3e\n\t\t<div class="navigation-buttons">\n\t\t  <slot name="prev-btn"></slot>\n\t\t  <slot name="next-btn"></slot>\n\t\t</div>\n\t  '}static get observedAttributes(){return["show-connector","jump"]}attributeChangedCallback(t,n,e){"jump"===t&&(this.jumpEnabled="true"===e)}connectedCallback(){this.initializeStepper(),this.renderStepper(),this.updateButtons(),this.shadowRoot.querySelector('slot[name="prev-btn"]').addEventListener("slotchange",(()=>{const t=this.shadowRoot.querySelector('slot[name="prev-btn"]').assignedElements()[0];t&&t.addEventListener("click",(()=>this.prevStep()))})),this.shadowRoot.querySelector('slot[name="next-btn"]').addEventListener("slotchange",(()=>{const t=this.shadowRoot.querySelector('slot[name="next-btn"]').assignedElements()[0];t&&t.addEventListener("click",(()=>this.nextStep()))}))}initializeStepper(){const t=parseInt(this.getAttribute("steps"),10);if(isNaN(t)||t<1||t>10)return void console.error("El número de pasos debe estar entre 1 y 10.");this.steps=Array.from({length:t}),this.characterType=this.getAttribute("stepsCharacter")||"number";const n=this.getAttribute("instruction");try{this.instructionData=JSON.parse(n),Array.isArray(this.instructionData)||(console.error("El atributo 'instruction' debe ser un array de objetos."),this.instructionData=[])}catch(t){console.error("El atributo 'instruction' debe ser un array JSON válido.")}}getStepCharacter(t){switch(this.characterType){case"upper":return String.fromCharCode(65+t);case"lower":return String.fromCharCode(97+t);default:return t+1}}renderStepper(){const t=this.shadowRoot.querySelector("#stepper-container"),n=this.shadowRoot.querySelector("#instruction-text");t.innerHTML="";const e="false"!==this.getAttribute("show-connector");this.steps.forEach(((n,o)=>{if(o>0&&e){const n=document.createElement("div");n.classList.add("connector"),o<this.currentStep?n.style.background="linear-gradient(90deg, var(--stepper-completed-color) 100%, var(--stepper-background) 0%)":o===this.currentStep?this.animateConnector(n,!1):n.style.background="linear-gradient(90deg, var(--stepper-inactive-color) 100%, var(--stepper-background) 0%)",t.appendChild(n)}const s=document.createElement("div");s.classList.add("step"),o<this.currentStep&&s.classList.add("completed"),o===this.currentStep&&s.classList.add("active"),s.textContent=this.getStepCharacter(o),t.appendChild(s),this.jumpEnabled&&s.addEventListener("click",(()=>{this.jumpToStep(o)}))})),this.instructionData[this.currentStep]&&(n.innerHTML=`<b>Paso ${this.getStepCharacter(this.currentStep)}.</b> ${this.instructionData[this.currentStep].text}`),this.updateButtons()}updateButtons(){const t=this.shadowRoot.querySelector('slot[name="next-btn"]').assignedElements()[0],n=this.shadowRoot.querySelector('slot[name="prev-btn"]').assignedElements()[0];n&&(n.disabled=0===this.currentStep),t&&(this.currentStep===this.steps.length-1?t.textContent="Finalizar":t.textContent="Siguiente")}animateConnector(t,n){let e=0;const o=setInterval((()=>{e+=5,t.style.background=`linear-gradient(90deg, var(--stepper-color) ${e}%, var(--stepper-background) ${e}%)`,e>=100&&(clearInterval(o),n&&(t.style.backgroundColor="var(--stepper-completed-color)"))}),10)}async nextStep(){this.currentStep<this.steps.length-1?(this.currentStep++,this.renderStepper()):this.currentStep===this.steps.length-1&&this.completeStepper()}async prevStep(){this.currentStep>0&&(this.currentStep--,this.renderStepper())}jumpToStep(t){this.currentStep=t,this.renderStepper()}completeStepper(){this.shadowRoot.querySelectorAll(".connector").forEach((t=>{t.style.background="linear-gradient(90deg, var(--stepper-completed-color) 100%, var(--stepper-background) 0%)"}));const t=this.shadowRoot.querySelector(`.stepper .step:nth-child(${2*this.steps.length-1})`);t&&t.classList.add("completed");const n=this.shadowRoot.querySelector('slot[name="prev-btn"]').assignedElements()[0];n&&(n.disabled=!0)}}customElements.define("btp-stepper",t)}},n={};function e(o){var s=n[o];if(void 0!==s)return s.exports;var r=n[o]={exports:{}};return t[o](r,r.exports,e),r.exports}e.n=t=>{var n=t&&t.__esModule?()=>t.default:()=>t;return e.d(n,{a:n}),n},e.d=(t,n)=>{for(var o in n)e.o(n,o)&&!e.o(t,o)&&Object.defineProperty(t,o,{enumerable:!0,get:n[o]})},e.o=(t,n)=>Object.prototype.hasOwnProperty.call(t,n),(()=>{"use strict";e(800),e(331),e(736),e(400),e(13),e(998),e(947),e(189),e(572),e(565),e(413),document.addEventListener("DOMContentLoaded",(function(){console.log("Aplicación cargada y lista.")}))})()})();